link:https://www.cnblogs.com/apexchu/p/5015961.html
、Python调用C动态链接库 

  Python调用C库比较简单，不经过任何封装打包成so，再使用python的ctypes调用即可。
（1）C语言文件：pycall.c
 	/***gcc -o libpycall.so -shared -fPIC pycall.c*/  
	#include <stdio.h>  
	#include <stdlib.h>  
	int foo(int a, int b)  
	{  
	  printf("you input %d and %d\n", a, b);  
	  return a+b;  
	}

（2）gcc编译生成动态库libpycall.so：gcc -o libpycall.so -shared -fPIC pycall.c。使用g++编译生成C动态库的代码中的函数或者方法时，需要使用extern "C"来进行编译。
（3）Python调用动态库的文件：pycall.py

import ctypes  #直接使用ctype就可以调用
ll = ctypes.cdll.LoadLibrary   
lib = ll("./libpycall.so")    
lib.foo(1, 3)  
print '***finish***'  
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
2、Python调用C++(类)动态链接库 
       需要extern "C"来辅助，也就是说还是只能调用C函数，不能直接调用方法，但是能解析C++方法。不是用extern "C"，构建后的动态链接库没有这些函数的符号表。
（1）C++类文件：pycallclass.cpp
	#include <iostream>  
	using namespace std;  
	  
	class TestLib  
	{  
	    public:  
		void display();  
		void display(int a);  
	};  
	void TestLib::display() {  
	    cout<<"First display"<<endl;  
	}  
	  
	void TestLib::display(int a) {  
	    cout<<"Second display:"<<a<<endl;  
	} 
	//需要借用　extern "c"来使用c++代码 
	extern "C" {  
	    TestLib obj;  
	    void display() {  
		obj.display();   
	      }  
	    void display_int() {  
		obj.display(2);   
	      }  
	}
	
（3）Python调用动态库的文件：pycallclass.py
	import ctypes  
	so = ctypes.cdll.LoadLibrary   
	lib = so("./libpycallclass.so")   
	print 'display()'  
	lib.display()  
	print 'display(100)'  
	lib.display_int(100) 
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊


三、C/C++调用Python

       C++可以调用Python脚本，那么就可以写一些Python的脚本接口供C++调用了，至少可以把Python当成文本形式的动态链接库， 
需要的时候还可以改一改，只要不改变接口。缺点是C++的程序一旦编译好了，再改就没那么方便了。
（1）Python脚本：pytest.py
	#test function  
	def add(a,b):  
	    print "in python function add"  
	    print "a = " + str(a)  
	    print "b = " + str(b)  
	    print "ret = " + str(a+b)  
	    return  
	  
	def foo(a):  
	  
	    print "in python function foo"  
	    print "a = " + str(a)  
	    print "ret = " + str(a * a)  
	    return   
	  
	class guestlist:  
	    def __init__(self):  
		print "aaaa"  
	    def p():  
	      print "bbbbb"  
	    def __getitem__(self, id):  
	      return "ccccc"  
	def update():  
	    guest = guestlist()  
	    print guest['aa']  
  
	#update()



（2）C++代码：(调用上面的python脚本，待尝试)
/**g++ -o callpy callpy.cpp -I/usr/include/python2.6 -L/usr/lib64/python2.6/config -lpython2.6**/  
#include <Python.h>  
int main(int argc, char** argv)  
{  
    // 初始化Python  
    //在使用Python系统前，必须使用Py_Initialize对其  
    //进行初始化。它会载入Python的内建模块并添加系统路  
    //径到模块搜索路径中。这个函数没有返回值，检查系统  
    //是否初始化成功需要使用Py_IsInitialized。  
    Py_Initialize();  
  
    // 检查初始化是否成功  
    if ( !Py_IsInitialized() ) {  
        return -1;  
    }  
    // 添加当前路径  
    //把输入的字符串作为Python代码直接运行，返回0  
    //表示成功，-1表示有错。大多时候错误都是因为字符串  
    //中有语法错误。  
    PyRun_SimpleString("import sys");  
    PyRun_SimpleString("print '---import sys---'");   
    PyRun_SimpleString("sys.path.append('./')");  
    PyObject *pName,*pModule,*pDict,*pFunc,*pArgs;  
  
    // 载入名为pytest的脚本  
    pName = PyString_FromString("pytest");  
    pModule = PyImport_Import(pName);  
    if ( !pModule ) {  
        printf("can't find pytest.py");  
        getchar();  
        return -1;  
    }  
    pDict = PyModule_GetDict(pModule);  
    if ( !pDict ) {  
        return -1;  
    }  
  
    // 找出函数名为add的函数  
    printf("----------------------\n");  
    pFunc = PyDict_GetItemString(pDict, "add");  
    if ( !pFunc || !PyCallable_Check(pFunc) ) {  
        printf("can't find function [add]");  
        getchar();  
        return -1;  
     }  
  
    // 参数进栈  
    *pArgs;  
    pArgs = PyTuple_New(2);  
  
    //  PyObject* Py_BuildValue(char *format, ...)  
    //  把C++的变量转换成一个Python对象。当需要从  
    //  C++传递变量到Python时，就会使用这个函数。此函数  
    //  有点类似C的printf，但格式不同。常用的格式有  
    //  s 表示字符串，  
    //  i 表示整型变量，  
    //  f 表示浮点数，  
    //  O 表示一个Python对象。  
  
    PyTuple_SetItem(pArgs, 0, Py_BuildValue("l",3));  
    PyTuple_SetItem(pArgs, 1, Py_BuildValue("l",4));  
  
    // 调用Python函数  
    PyObject_CallObject(pFunc, pArgs);  
  
    //下面这段是查找函数foo 并执行foo  
    printf("----------------------\n");  
    pFunc = PyDict_GetItemString(pDict, "foo");  
    if ( !pFunc || !PyCallable_Check(pFunc) ) {  
        printf("can't find function [foo]");  
        getchar();  
        return -1;  
     }  
  
    pArgs = PyTuple_New(1);  
    PyTuple_SetItem(pArgs, 0, Py_BuildValue("l",2));   
  
    PyObject_CallObject(pFunc, pArgs);  
       
    printf("----------------------\n");  
    pFunc = PyDict_GetItemString(pDict, "update");  
    if ( !pFunc || !PyCallable_Check(pFunc) ) {  
        printf("can't find function [update]");  
        getchar();  
        return -1;  
     }  
    pArgs = PyTuple_New(0);  
    PyTuple_SetItem(pArgs, 0, Py_BuildValue(""));  
    PyObject_CallObject(pFunc, pArgs);       
  
    Py_DECREF(pName);  
    Py_DECREF(pArgs);  
    Py_DECREF(pModule);  
  
    // 关闭Python  
    Py_Finalize();  
    return 0;  
}

（3）C++编译成二进制可执行文件：g++ -o callpy callpy.cpp -I/usr/include/python2.6 -L/usr/lib64/python2.6/config -lpython2.6，编译选项需要手动指定Python的include路径和链接接路径（Python版本号根据具体情况而定）。

